name: Build

on: pull_request

env:
  DOCKERHUB_USER: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_PASS: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE: adachikun/snowforecast-twitter-bot

jobs:
#   build_no_cache:
#     runs-on: ubuntu-18.04
#     steps:
#       - uses: actions/checkout@master
#       - name: Create .env file
#         run: echo "${{ secrets.GITHUBACTION_ENV }}" > .env
#       - name: Build
#         run: docker build .

  build_no_cache_buildkit:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
      - name: Create .env file
        run: echo "${{ secrets.GITHUBACTION_ENV }}" > .env
      - name: Build
        env:
          DOCKER_BUILDKIT: 1
        run: docker build . --tag $IMAGE:latest
      - name: Push
        run: docker push $IMAGE:latest

#  build_with_docker_save_load:
#    runs-on: ubuntu-18.04
#    steps:
#    - uses: actions/checkout@master
#    - name: Create .env file
#      run: echo "${{ secrets.GITHUBACTION_ENV }}" > .env
#    - id: docker-cache-step
#      uses: actions/cache@v1
#      with:
#        path: /tmp/saveload-cache
#        key: docker-saveload-${{ hashFiles('Dockerfile') }}
#    - run: docker load -i /tmp/saveload-cache/go-builder.tar || true
#      if: steps.docker-cache-step.outputs.cache-hit == 'true'
#    - run: docker build . -t thing --target builder --cache-from=thing-cache
#    - run: docker build . --cache-from=thing-cache
#    - run: docker tag thing thing-cache && mkdir -p /tmp/saveload-cache && docker save thing-cache -o /tmp/saveload-cache/go-builder.tar && ls -lh /tmp/saveload-cache || true
#      if: always() && steps.docker-cache-step.outputs.cache-hit != 'true'
#
#
#   cache-from-with-build-arg:
#     runs-on: ubuntu-18.04
#     steps:
#     - uses: actions/checkout@master
#     - name: Create .env file
#       run: echo "${{ secrets.GITHUBACTION_ENV }}" > .env
#     - name: login
#       run: docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
#     - name: build builder image
#       run: docker build --target builder --cache-from $IMAGE:builder --tag $IMAGE:builder --build-arg BUILDKIT_INLINE_CACHE=1 .
#     - name: build image
#       run: docker build --cache-from $IMAGE:builder --cache-from $IMAGE:latest --tag $IMAGE:latest --build-arg BUILDKIT_INLINE_CACHE=1 .
#     - name: push image
#       run: |
#         docker push $IMAGE:builder &
#         docker push $IMAGE:latest &
#         wait
